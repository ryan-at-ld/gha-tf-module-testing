name: Module Versioning
run-name: Module Versioning
on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed
      - reopened
      - synchronize

jobs:
  check-version-files:
    # Only run when a PR is open or if it has been closed because it is merged.  Without this check, it will run when the PR is manually closed.
    if: github.event.pull_request.state == 'open' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Find modified VERSION files in the helpers, resources, and services directories
    outputs:
      module-directories: ${{ steps.changed-version-files.outputs.all_changed_files }}
      module-count: ${{ steps.changed-version-files.outputs.all_changed_files_count }}
    steps:
      - uses: actions/checkout@v4
      - name: Get changed version files
        id: changed-version-files
        uses: tj-actions/changed-files@4edd678ac3f81e2dc578756871e4d00c19191daf #v45
        with:
          matrix: true
          dir_names: "true"
          files: |
            helpers/**/VERSION
            resources/**/VERSION
            services/**/VERSION

  new-module-version:
    name: Release new module versions on merge
    runs-on: ubuntu-latest
    needs: [ check-version-files ]
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.check-version-files.outputs.module-directories) }}
      max-parallel: 4
      fail-fast: false
    # Only run if there are modified version files because GHA will complain if the matrix dimension contains an empty list.
    if: 0 < fromJSON(needs.check-version-files.outputs.module-count)
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.GHA_AUTO_TAGGING_DEPLOY_KEY }}
      - name: Parse the version file
        id: parse-version-file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('node:fs');

            const moduleDirectory = '${{ matrix.directory }}';
            const filename = `${ moduleDirectory }/VERSION`;

            core.info(`Processing file "${filename}".`);

              try {

                const components = moduleDirectory.split('/');
                const moduleType = components[0];
                const moduleName = components.slice(1).join('/').toLowerCase();

                core.info(`Parsing version file for ${moduleType} module "${moduleName}"`);

                const version = fs.readFileSync(filename, 'utf8').trim();

                core.info(`Validating the contents of ${filename}.`);

                // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
                const semverRegex = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;

                if (semverRegex.test(version)) {

                  core.info("The VERSION file contains a valid semantic version string.");
                  const tag = `${moduleName}/${version}`.toLowerCase();
                  core.info(`The "${tag}" tag will be used for the new version of the module.`);

                  const data = {
                    "directory": moduleDirectory,
                    "filename": filename,
                    "name":  moduleName,
                    "tag": tag,
                    "type":  moduleType,
                    "version": version
                  };

                  core.exportVariable('MODULE_VERSION', JSON.stringify(data));

                } else {

                  // Add an error for the invalid value and decorate the code in the PR by including an annotation.
                  core.error("A version file must contain exactly one valid semantic version string as defined at https://semver.org/.", {
                    title: "Invalid VERSION file",
                    file: filename,
                    startLine: 0,
                    startColumn: 0
                  });

                  // Ensure the step fails by using a non-zero return value.
                  process.exitCode = 1;
                }

              } catch (err) {
                 core.setFailed(err);
              }

      - name: Check for an existing tag
        id: check-for-existing-tag
        uses: actions/github-script@v7
        with:
          retries: 3
          script: |
            const m = JSON.parse(process.env.MODULE_VERSION);
            try {

             await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${ m.tag }`
              });


              const errorMessage = `Version ${m.version} of the ${m.type} module "${m.name}" cannot be created because the Git tag "${ m.tag}" already exists.  Change the contents of the file to a different version if you intend to create a new Git tag.`;
              // The error method is used instead of setFailed method so that the code can be annotated.
              core.error(errorMessage, {
                  title: "Duplicate Git tag",
                  file: m.filename,
                  startLine: 0,
                  startColumn: 0
              });

              // Set the exit code to a non-zero value to fail the step.
              process.exitCode = 1;

            } catch (err) {
             if (err.status == 404) {
              core.info(`The "${m.tag}" Git tag does not exist.  A new Github release and Git tag will be created.`)
             } else {
               core.setFailed(err);
             }
            }
      - name: Create or preview release
        id: create-release
        uses: actions/github-script@v7
        with:
          retries: 3
          script: |

            const m = JSON.parse(process.env.MODULE_VERSION);

            const sourceUrl = `git::ssh://git@github.com/${{ github.repository }}//${m.directory}?ref=${m.tag}`;
            const name = m.tag;
            const tag = m.tag;
            const body = `
            Version \`${m.version}\` of ${m.type} module [${m.name}](${m.directory}).

            To use this version of the module, set the \`source\` argument of the module call to the following value.
            \`${sourceUrl}\`.

            This release was generated by [run ${{ github.run_number }} of the "${{ github.workflow }}" workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) after pull request #${{ github.event.number }} was merged.
            `;

            if (context.payload.pull_request.merged) {

              // Create the tag using Git instead of the GitHub API because it is not possible to by-pass GitHub Rulesets with the GHA token.
              core.info("Creating the Git tag in the local repo.");
              await exec.exec('git', ['tag', m.tag]);

              core.info("Pushing the Git tag.");
              await exec.exec('git', ['push', 'origin', 'tag', m.tag]);

              await github.rest.repos.createRelease({
                body: body,
                name: name,
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                target_commitish: '${{ github.sha }}'
              });

            } else {
              core.notice(`The "${name}" Github release and the "${tag}" Git tag will not be created until the pull request has been merged.`);
              core.info("The following is a preview of the release body's markdown.");
              core.info(body);
            }

  # The check-job-results job ensures that the previous jobs in this workflow succeeded.  GitHub's branch protection feature and rulesets feature both support
  # the ability to make GHA jobs (not workflows) required before a PR can be merged.  Unfortunately, the names of the required jobs must be enumerated in the settings.
  # There is no way to ensure that every workflow job that runs must succeed without naming each one individually.  The limitation makes it impossible to make a
  # dynamically configured matrix job required.  By making this job both required and dependent on the previous job, it can prevent merges by failing it if any of the
  # previous jobs did not succeed.
  check-job-results:
    needs:
      - new-module-version
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            console.log(context);
            const checks = ${{ toJSON(needs) }};
            for (const [key, value] of Object.entries(checks)) {
              const result = value.result;
              if (result !== 'success' && result !== 'skipped') {
                core.setFailed(`The required job "${key}" was not successful.  Please check the job logs for more details.`);
              }
            }
            
            
      
